!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).Canvas=e()}(this,(function(){"use strict";class t{constructor(t,e,s,o,i){this.x=t,this.y=e,this.r=s,this.sides=o,this.context=i}getPoints(){const{x:t,y:e,r:s,sides:o}=this,i=360/o,n=[];for(let o=0;o<360;o+=i){const i=o/180*Math.PI,r=t+s*Math.sin(i),h=e+s*Math.cos(i);n.push({x:r,y:h})}return n}createPath(){const t=this.getPoints(),{context:e}=this,{x:s,y:o}=t[0];e.beginPath(),e.moveTo(s,o);for(let s=1,o=t.length;s<o;s++){const{x:o,y:i}=t[s];e.lineTo(o,i)}e.closePath()}move(t,e){this.x=t,this.y=e}fill(t){const{context:e}=this;e.save(),t&&(e.fillStyle=t),e.fill(),e.restore()}stroke(t,e){const{context:s}=this;s.save(),t&&(s.strokeStyle=t),e&&(s.lineWidth=e),s.stroke(),s.restore()}}return class{constructor(t,e={}){const s=t.getContext("2d"),{lineWidth:o,fillStyle:i,strokeStyle:n}=e;s.lineWidth=o||1,s.fillStyle=i||"#fff",s.strokeStyle=n||"#000",this.canvas=t,this.context=s}line(t,e,s,o,i){const{context:n}=this;return n.beginPath(),n.moveTo(t,e),n.lineTo(s,o),this.stroke(i),this}arc(t,e,s,o,i,n,r){const{context:h}=this;return h.beginPath(),h.arc(t,e,s,o,i,n),this.stroke(r),this}circle(t,e,s,o){const{context:i}=this;return i.beginPath(),i.arc(t,e,s,0,2*Math.PI),this.stroke(o),this}rect(t,e,s,o,i){const{context:n}=this;return n.beginPath(),n.rect(t,e,s,o),this.stroke(i),this}polygon(e,s,o,i){const{context:n}=this,r=new t(e,s,o,i,n);return r.createPath(),r.stroke(),r}grid(t=10,e=10,s=.5,o,i){const{canvas:n,context:r}=this,{width:h,height:c}=n;this.rect(0,0,h,c).fill(i),r.beginPath();for(let t=e+s;t<c;t+=e)r.moveTo(0,t),r.lineTo(h,t);for(let e=t+s;e<h;e+=t)r.moveTo(e,0),r.lineTo(e,c);this.stroke(o,s),r.restore()}stroke(t={}){const{context:e}=this,{lineWidth:s,strokeStyle:o}=t;return e.save(),o&&(e.strokeStyle=o),s&&(e.lineWidth=s),e.stroke(),e.restore(),this}fill(t){const{context:e}=this;return e.save(),t&&(e.fillStyle=t),e.fill(),e.restore(),this}windowToCanvas(t,e){const{top:s,left:o}=this.canvas.getBoundingClientRect();return{x:t-o,y:e-s}}}}));
