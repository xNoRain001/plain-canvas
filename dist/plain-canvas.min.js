!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).Canvas=e()}(this,(function(){"use strict";class t{constructor(t,e={}){const s=t.getContext("2d"),{lineWidth:i,fillStyle:n,strokeStyle:o}=e,{lineWidth:r,fillStyle:l,strokeStyle:h}=s;s.lineWidth=i||r||1,s.fillStyle=n||l||"#fff",s.strokeStyle=o||h||"#000",this.canvas=t,this.context=s}line(t,e,s,i,n){const{context:o}=this;return o.beginPath(),o.moveTo(t,e),o.lineTo(s,i),this.stroke(n),this}arc(t,e,s,i,n,o,r){const{context:l}=this;return l.beginPath(),l.arc(t,e,s,i,n,o),this.stroke(r),this}circle(t,e,s,i){return this.arc(t,e,s,0,2*Math.PI,!1,i)}ellipse(t,e,s,i,n,o){const{context:r}=this;return r.beginPath(),r.ellipse(t,e,s,i,n,0,2*Math.PI),this.stroke(o),this}rect(t,e,s,i,n){const{context:o}=this;return o.beginPath(),o.rect(t,e,s,i),this.stroke(n),this}polygon(t,s,i,n,o,r){"number"!=typeof o&&(r=o,o=0);const l=new e(t,s,i,n,o,this.canvas);return l.createPath(),l.stroke(r),l}grid(t=10,e=10,s){const{canvas:i,context:n}=this,{width:o,height:r}=i,l=s?.lineWidth||n.lineWidth;this.rect(0,0,o,r).fill("white"),n.beginPath();for(let t=e+l;t<r;t+=e)n.moveTo(0,t),n.lineTo(o,t);for(let e=t+l;e<o;e+=t)n.moveTo(e,0),n.lineTo(e,r);this.stroke(s),n.restore()}stroke(t={}){const{context:e}=this,{lineWidth:s,strokeStyle:i}=t;return e.save(),i&&(e.strokeStyle=i),s&&(e.lineWidth=s),e.stroke(),e.restore(),this}fill(t){const{context:e}=this;return e.save(),t&&(e.fillStyle=t),e.fill(),e.restore(),this}windowToCanvas(t,e){const{top:s,left:i}=this.canvas.getBoundingClientRect();return{x:t-i,y:e-s}}}class e extends t{constructor(t,e,s,i,n,o){super(o,{}),this.x=t,this.y=e,this.r=s,this.startAngle=n,this.sides=i;const{context:r}=this;this.fillStyle=r.fillStyle,this.strokeStyle=r.strokeStyle}getPoints(){const{x:t,y:e,r:s,sides:i,startAngle:n}=this,o=360/i,r=[];for(let i=0;i<360;i+=o){const o=(i-n)/180*Math.PI,l=t+s*Math.sin(o),h=e+s*Math.cos(o);r.push({x:l,y:h})}return r}createPath(){const t=this.getPoints(),{context:e}=this,{x:s,y:i}=t[0];e.beginPath(),e.moveTo(s,i);for(let s=1,i=t.length;s<i;s++){const{x:i,y:n}=t[s];e.lineTo(i,n)}e.closePath()}}return t}));
